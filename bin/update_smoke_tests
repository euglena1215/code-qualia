#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'

# Script to update smoke test expected outputs
class SmokeTestUpdater
  def initialize
    @root_dir = File.expand_path('..', __dir__)
    @smoke_dir = File.join(@root_dir, 'smoke')
    @expected_outputs_dir = File.join(@root_dir, 'expected_outputs')
  end

  def run
    puts '🔄 Updating smoke test expected outputs...'

    smoke_projects.each do |project|
      puts "\n📁 Processing #{project[:name]}..."
      update_project_outputs(project)
    end

    puts "\n✅ All smoke test expected outputs have been updated!"
  end

  private

  def smoke_projects
    projects = []
    Dir.entries(@smoke_dir).each do |entry|
      project_path = File.join(@smoke_dir, entry)
      expected_path = File.join(@expected_outputs_dir, entry)

      # Only include directories that have a Gemfile
      next unless File.directory?(project_path) &&
                  !entry.start_with?('.') &&
                  File.exist?(File.join(project_path, 'Gemfile'))

      projects << {
        name: entry,
        dir: project_path,
        expected_path: expected_path,
        is_rails: File.exist?(File.join(project_path, 'config', 'application.rb'))
      }
    end
    projects
  end

  def update_project_outputs(project)
    # Ensure expected outputs directory exists
    FileUtils.mkdir_p(project[:expected_path])

    # Generate coverage data if needed
    generate_coverage_data(project)

    # Generate outputs for each format
    %w[human json csv table].each do |format|
      puts "  📊 Generating #{format} format..."

      command_output = if project[:is_rails]
                         # For Rails projects, run from within the project directory
                         `cd #{project[:dir]} && bundle exec code-qualia generate --format #{format} --top-n 10 2>&1`
                       else
                         # For non-Rails projects, run from project root with --directory option
                         `bundle exec code-qualia generate --format #{format} --directory #{project[:dir]} --top-n 10 2>&1`
                       end

      if $?.success?
        file_extension = if format == 'json'
                           'json'
                         else
                           (format == 'csv' ? 'csv' : 'txt')
                         end
        output_file = File.join(project[:expected_path], "output_#{format}.#{file_extension}")
        File.write(output_file, command_output)
        puts "    ✓ Saved to #{File.basename(output_file)}"
      else
        puts "    ❌ Failed to generate #{format} format for #{project[:name]}"
        puts "    Error output: #{command_output}"
      end
    end

    # Clean up generated files
    cleanup_generated_files(project)
  end

  def generate_coverage_data(project)
    puts '  🧪 Generating coverage data...'
    Dir.chdir(project[:dir]) do
      if project[:is_rails]
        # For Rails projects, run RSpec to generate coverage
        `bundle exec rspec 2>/dev/null || true`
      elsif File.exist?('spec/spec_helper.rb')
        `bundle exec rspec --require spec_helper 2>/dev/null || true`
      elsif File.exist?('test/test_helper.rb')
        `bundle exec rake test 2>/dev/null || true`
      end
    end
  end

  def cleanup_generated_files(project)
    generated_json_path = File.join(project[:dir], 'code_qualia_analysis.json')
    File.delete(generated_json_path) if File.exist?(generated_json_path)
  end
end

# Run the updater
SmokeTestUpdater.new.run if __FILE__ == $0
